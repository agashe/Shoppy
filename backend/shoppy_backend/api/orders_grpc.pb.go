// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: orders.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersOperationsClient is the client API for OrdersOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersOperationsClient interface {
	FetchOrders(ctx context.Context, in *FetchOrdersRequest, opts ...grpc.CallOption) (*FetchOrdersResponse, error)
	FetchOrder(ctx context.Context, in *FetchOrderRequest, opts ...grpc.CallOption) (*FetchOrderResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
}

type ordersOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersOperationsClient(cc grpc.ClientConnInterface) OrdersOperationsClient {
	return &ordersOperationsClient{cc}
}

func (c *ordersOperationsClient) FetchOrders(ctx context.Context, in *FetchOrdersRequest, opts ...grpc.CallOption) (*FetchOrdersResponse, error) {
	out := new(FetchOrdersResponse)
	err := c.cc.Invoke(ctx, "/shoppy_backend.OrdersOperations/FetchOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersOperationsClient) FetchOrder(ctx context.Context, in *FetchOrderRequest, opts ...grpc.CallOption) (*FetchOrderResponse, error) {
	out := new(FetchOrderResponse)
	err := c.cc.Invoke(ctx, "/shoppy_backend.OrdersOperations/FetchOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersOperationsClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/shoppy_backend.OrdersOperations/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersOperationsServer is the server API for OrdersOperations service.
// All implementations must embed UnimplementedOrdersOperationsServer
// for forward compatibility
type OrdersOperationsServer interface {
	FetchOrders(context.Context, *FetchOrdersRequest) (*FetchOrdersResponse, error)
	FetchOrder(context.Context, *FetchOrderRequest) (*FetchOrderResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	mustEmbedUnimplementedOrdersOperationsServer()
}

// UnimplementedOrdersOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersOperationsServer struct {
}

func (UnimplementedOrdersOperationsServer) FetchOrders(context.Context, *FetchOrdersRequest) (*FetchOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrders not implemented")
}
func (UnimplementedOrdersOperationsServer) FetchOrder(context.Context, *FetchOrderRequest) (*FetchOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrder not implemented")
}
func (UnimplementedOrdersOperationsServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrdersOperationsServer) mustEmbedUnimplementedOrdersOperationsServer() {}

// UnsafeOrdersOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersOperationsServer will
// result in compilation errors.
type UnsafeOrdersOperationsServer interface {
	mustEmbedUnimplementedOrdersOperationsServer()
}

func RegisterOrdersOperationsServer(s grpc.ServiceRegistrar, srv OrdersOperationsServer) {
	s.RegisterService(&OrdersOperations_ServiceDesc, srv)
}

func _OrdersOperations_FetchOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersOperationsServer).FetchOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppy_backend.OrdersOperations/FetchOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersOperationsServer).FetchOrders(ctx, req.(*FetchOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersOperations_FetchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersOperationsServer).FetchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppy_backend.OrdersOperations/FetchOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersOperationsServer).FetchOrder(ctx, req.(*FetchOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersOperations_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersOperationsServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppy_backend.OrdersOperations/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersOperationsServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersOperations_ServiceDesc is the grpc.ServiceDesc for OrdersOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shoppy_backend.OrdersOperations",
	HandlerType: (*OrdersOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchOrders",
			Handler:    _OrdersOperations_FetchOrders_Handler,
		},
		{
			MethodName: "FetchOrder",
			Handler:    _OrdersOperations_FetchOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrdersOperations_CreateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orders.proto",
}
